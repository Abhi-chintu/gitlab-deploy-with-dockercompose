workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - when: always

variables:
  SERVER_HOST: 65.2.181.36
  URL: ec2-65-2-181-36.ap-south-1.compute.amazonaws.com:3000
stages:
  - test
  - build
  - deploy

run_unit_tests:
  stage: test
  tags:
    - ec2
    - docker
    - remote
  image: node:16-alpine
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit: app/junit.xml

build_image:
  stage: build
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$VERSION .  
  artifacts:
    paths:
      - version-file.txt

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export VERSION=$(cat version-file.txt)
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
  script:
    - docker push $CI_REGISTRY_IMAGE:$VERSION  

deploy_to_dev:
  stage: deploy
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - export VERSION=$(cat version-file.txt)
    - chmod 400 $SSH_PRIVATE_KEY
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ec2-user@$SERVER_HOST \
      "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE && docker run -d -p 3000:3000 $CI_REGISTRY_IMAGE:$VERSION"
  environment:
    name: deployment
    url: "$URL"
