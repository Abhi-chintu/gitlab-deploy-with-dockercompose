stages:
  - test
  - build
  - deploy

variables:
  APP_ENDPOINT_DEV: http://ec2-15-236-180-248.eu-west-3.compute.amazonaws.com:3000
  IMAGE_NAME: $CI_REGISTRY_IMAGE/microservice/$MICRO_SERVICE_NAME  
  IMAGE_TAG: "1.0"
  DEV_ENV_HOST: "15.236.180.248"

run_tests:
  stage: test
  image: node:17-alpine3.14
  tags:
    - ec2
    - docker
    - remote
  before_script:
    - cd app
    - npm install
  script:
    - npm run test
  artifacts:
    when: always
    paths:
      - app/junit.xml
    reports:
      junit:
        - app/junit.xml

build_image:
  stage: build
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - echo "Linux user is $USER"
    - echo "Docker registry user is $CI_REGISTRY_USER"
    - echo "Docker registry name is $CI_REGISTRY"
    - echo "Docker registry image is $CI_REGISTRY_IMAGE"
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .

push_image:
  stage: build
  needs:
    - build_image
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$IMAGE_TAG

deploy_dev:
  stage: deploy
  tags:
    - ec2
    - shell
    - remote
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  script:
    - scp -o StrictHostKeyChecking=no ./docker-compose.yaml ubuntu@$DEV_ENV_HOST:/home/ubuntu/docker-compose.yml
    - ssh -o StrictHostKeyChecking=no ubuntu@$STAGING_ENV_HOST "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && 

        docker-compose down --rmi 'local' && 
        docker-compose pull &&
        docker-compose up -d"
 
 

